using Microsoft.Extensions.Configuration;
using OpenAIServices;
using HL7Services;
using Serilog;

namespace HL7MockGenerator;

internal static class Program
{
    private static IConfiguration? _configuration;

    private static async Task Main(string[] args)
    {
        // Load configuration from appsettings.json
        _configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json", optional: false)
            .Build();

        Console.WriteLine("--- HL7 Mock Generator ---");

        // Initialize Serilog
        Log.Logger = new LoggerConfiguration()
            .WriteTo.File(
                formatter: new Serilog.Formatting.Json.JsonFormatter(),
                path: "log_hl7.json",
                rollingInterval: RollingInterval.Day
            )
            .CreateLogger();

        var ip = _configuration["Connection:Ip"] ?? Prompt("Enter recipient IP: ");
        var port = int.Parse(_configuration["Connection:Port"] ?? Prompt("Enter recipient port: "));

        var genMode = _configuration["Mode"] ?? Prompt("Mode: [1] Single send, [2] Continuous: ");

        var specsPath = _configuration["SpecsPath"] ?? Prompt("Enter the path to the specifications folder: ");
        var reloadSpecs = Prompt("Reload specifications? [y/n]: ");

        var hl7MessageType = _configuration["Message:Type"] ?? Prompt("Message type (e.g., ADT^A31): ");
        var hl7Version = _configuration["Message:Version"] ?? Prompt("HL7 version (e.g., 2.5): ");

        var openaiKey = Environment.GetEnvironmentVariable("OPENAI_API_KEY") ?? Prompt("Enter OpenAI API Key: ");
        var openaiModel = _configuration["OpenAI:Model"] ?? Prompt("Model (e.g., gpt-3.5-turbo): ");

        // Additional instructions for the AI
        Console.Write("Additional instructions: ");
        var addInstructions = Console.ReadLine();

        // Check if the OpenAI API key is valid
        var apiCaller = new OpenAiUtilities(openaiKey, openaiModel);
        var checkApiKey = await apiCaller.CheckApiKeyAsync();
        if (!string.IsNullOrEmpty(checkApiKey))
        {
            Console.WriteLine("[ERROR] Invalid OpenAI API Key: " + checkApiKey);
            return;
        }

        // Create AI assistant
        var aiHelper = new OpenAiAssistantHelper(openaiKey, openaiModel);
        await aiHelper.UploadFilesToVectorStoreAsync(specsPath,
            reloadSpecs.Equals("y", StringComparison.OrdinalIgnoreCase));
        await aiHelper.CreateAssistantAsync();

        do
        {
            var prompt = $"Generate an HL7 v{hl7Version} message of type {hl7MessageType}" +
                         $" in pipe-delimited format. Invent real data. {addInstructions}";

            var hl7Message = await aiHelper.AskAsync(prompt.Trim());

            if (string.IsNullOrWhiteSpace(hl7Message))
            {
                Console.WriteLine("[ERROR] The message generated by the AI is empty or invalid.");
                continue;
            }

            // Normalize the HL7 message to ensure it has CRLF line endings
            hl7Message = hl7Message.Replace("\r\n", "\n")
                .Replace("\r", "\n")
                .Replace("\n", "\r\n")
                .Trim();

            Console.WriteLine("\n--- HL7 Message ---\n" + hl7Message);

            var ack = await Sender.SendHl7MessageAsync(ip, port, hl7Message);
            Console.WriteLine("\n--- ACK Received ---\n" + ack);

            Log.Information("Message sent: {hl7Message} - Ack: {ack}", hl7Message, ack);

            // Check if the user select mode 1 or 2
            if (genMode != "2") break;

            Console.WriteLine("Press Enter to send another message, ESC to exit.");
            var key = Console.ReadKey();
            if (key.Key == ConsoleKey.Escape) break;
        } while (true);

        await Log.CloseAndFlushAsync();
    }

    /// <summary>
    /// Prompt the user for input until a non-empty string is provided.
    /// </summary>
    /// <param name="message">The message to display to the user</param>
    /// <returns>The non-empty string input from the user</returns>
    private static string Prompt(string message)
    {
        string? input;
        do
        {
            Console.Write(message);
            input = Console.ReadLine();
        } while (string.IsNullOrWhiteSpace(input));

        return input;
    }
}